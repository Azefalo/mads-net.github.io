---
title: "Plugins"
author:
  - name: "Paolo Bosetti"
    affiliations: 
      - name: "University of Trento"
date: 06/06/2025
date-modified: today
format: html
# or uncomment the following line to also create PDF format
# format: 
#   html:
#     toc: true
#   pdf:
#     toc: true
draft: false
categories: [advanced, plugins, development, c++]
abstract: |
  MADS supports agents implemented as plugins in C++17. This guide explains how to create a plugin.
---

# What are plugins

Originally, MADS only allowed to develop monolitic agents: this required to write the whole executable code, including the management of command line arguments and loading of serrings from the INI file (either local or loaded from the broker). This solution is still possible (see [the guide](monolithic_agents.html)) and allows maximum flexibility, but it requires a good knowledse of the MADS innards and is more tedious and error prone.

For this reason, we developed the plugin support: the common functionality of an agent are already available, and only the data management operations need to be implemented.


# Behaviors of plugins

Remember that there are three [*behaviors* for plugins](structure.html#the-agents):

* source: puts data into the MADS network
* filter: transforms data
* sink: consumes data

As a consequences, there are three MADS subcommands to load a plugin, depending on its behavior: `mads source`, `mads filter`, and `mads sink`. They all take a mandatory argument that is the name or the path to a proper *plugin file*. 

A plugin file is a compiled dynamic library with the extension `.plugin`. The *behavior* of a plugin is rigid: a *source* plugin cannot be loaded by a *filter* agent.


# How to create a plugin

The `mads` command provides an utility to generate a template for a new plugin:

```bash
> mads plugin -h

Usage:
  plugin [OPTION...] name

  -t, --type arg         Type of the plugin
  -d, --dir arg          Directory of the plugin
  -i, --install-dir arg  Directory where to install the plugin
  -o, --overwrite        Overwrite existing files
  -v, --version          Print version
  -h, --help             Print usage
```

Suppose that you want to create a source plugin named `my_plugin`: then the command shall be `mads plugin -t source -d my_source my_source`. This will create a CMake stub project in the folder `my_source` that, once compiled, will produce a `my_source.plugin` library, setting CMake to install that file in the default MADS prefix path, as given by `mads -p`. The command line option `-i` can be used to override that path.


# How to configure and build

As suggested by the command output:

```bash
cd my_source
cmake -Bbuild 
# make your changes
cmake --build build -j6
```

These steps are iterative, and probably need to tweak with the `CMakeLists.txt` file for adding third party libraries and other source/header files. The last command produces in the `build` folder two notable files:

* `my_source.plugin`: the plugin proper;
* `my_source`: an executable generated by conditionally enabling the `Â main` function at the end of the `my_source.cpp` file.

The second file can be used for checking that the plogin properly deals with the data, without the need of a MADS network available (broker etc.). Indeed, that executable does not even connect to the broker. Launch it as:

```bash
build/my_source
```

During development, you want to use this executable quite often to test what you are doing. You also have to tune the `main` function so that the dummy data are properly defined.

When the bare executable works, you can try to load the plugin with the proper agent: provided that the broker is running and the `mads.ini` file contains a proper `[my_source]` section, you load the plugin as:

```bash
mads source build/my_source.plugin
```

The agent name is the name of the plugin (i.e. `my_source`). If you need to override that name --- for example, because you want to have different *identical* agents that load *different* settings --- then you can use the `-n` command line option and match the proper `mads.ini` section.


::: callout-important
On MacOS, the plugin file **can also be directly executed**, so the `my_source` executable is not generated and the `my_source.plugin` can be both loaded from an agent or directly executed for testing.
:::


## How to install the plugin

Once the plugin is tested (both standalone and when loaded from an agent) it should be installed in the MADS tree. Remember that the command `mads -i` shows where plugins are expected to be installed (usually, `/usr/local/lib`). To install:

```bash
cmake --install build
```

The you can launch it as agent with:

```bash
mads source my_source.plugin
```

And when you are satisfield with the result, you can make it a service as explained [here](services.html).