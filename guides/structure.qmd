---
title: "Network structure"
author:
  - name: "Paolo Bosetti"
    affiliations: 
      - name: "University of Trento"
date: 06/04/2025
date-modified: today
format: 
  html:
    toc: true
  pdf:
    toc: trueml
draft: false
categories: [template, basics]
abstract: |
  Illustrate a typical MADS network structure and its requirements.
---

# Architecture

The typical architecture of a MADS network can be represented as:

```{dot}
//| label: fig-net
//| fig-cap: "MADS Network"
//| fig-width: 6
//| fig-height: 3
digraph "MADS Network" {
  rankdir=LR
  bgcolor="#ffffff00"
  node[shape="rect", style=filled, fillcolor="#ffffff"]

  p1[label="Plugin 1", shape=cds]
  a1[label="Agent 1\n(source)"]
  p2[label="Plugin 2", shape=cds]
  a2[label="Agent 2\n(filter)"]
  p3[label="Plugin 3", shape=cds]
  a3[label="Agent 3\n(sink)"]
  a4[label="Monolithic\nAgent (filter)"]
  mongo[label="MongoDB", shape=cylinder]
  
  p1 -> a1[arrowhead=none]
  p2 -> a2[arrowhead=none]
  p3 -> a3[arrowhead=none]

  a1->broker
  a2->broker[dir=both]
  a3->broker[dir=back]
  a4->broker[dir=both]

  broker->logger
  logger->mongo[label="BSON", style=dashed]
}
```

::: callout-important
Remember that the above schematic represent *processes*, regardless the physical machine on which they are being executed.

For example, the whole network could run on a single workstation, or it could be conversely distributed over multiple devices connected to the same IP network, each device running a single process/node.
:::


In the figure @fig-net, the solid lines represent a [ZeroMQ](https://zeromq.org) connection over TCP/IP, which uses compressed JSON as a data encoding protocol. Compression is preformed with the [snappy](https://github.com/google/snappy) library. The dashed line, conversely, represents the proprietary MongoDB protocol, with data serialized as BSON (Binary-JSON).


## The broker

What is the broker purpose?

The broker solves the issue of knowing multiple network addresses when you have a number of devices participating to the same distributed system.

With the aid of the broker, any separate device partaking to the MADS network only needs to know a single hostname/IP address: that of the machine running the broker.

::: callout-warning
There can only be a single broker per network.
:::

Running the broker is quite simple:

```sh
mads broker
```

## The agents

Agents can be:

* **monolithic**: implemented as a single executable inheriting the `Mads::Agent` C++ class.
* **plug-in**: a single executable that on runtime loads a proper plug-in (i.e. a dynamically loaded library)

Regardless the type, agent can have three different behaviors:

- **source**: they provide information to the network (e.g. by reading sensors)
- **filter**: they operate and transform received information
- **sink**: they consume information received from the network (e.g. to store or visualize)

The MADS installer provides three general purpose agents, aptly named `source`, `filter`, and `sink`, that are designe do load proper plugins. The command `mads plugin` can be used to generate a suitable template for a new plugin to be developed.


# Layout and requirements

::: callout-note
To be done.
:::


# How to develop a plugin

::: callout-note
To be done.
:::


# How to deal with time

::: callout-note
To be done.
:::
